// GENERIC SCHEMA DEFINITIONS
// ----------------------------------------------------------------------------

// the union is used to make it possible to define recursive type structures

union SchemaType = SchemaScalarType | SchemaCompoundType

type SchemaScalarType {
  name : String!
  description : String
  type : String // scalar type
  identifier : Boolean
  aliases : [String] // email, e-mail, mail, mel, couriel
}

type SchemaCompoundType {
  name : String!
  description : String
  types : [SchemaType]
}

type KeyValue {
  key: String!
  value : String
}

// MANAGEMENT OBJECTS
// ----------------------------------------------------------------------------

// Management objects are associated with a scope
type Scope {
  id: ID!
}

type Persona {
  scope : Scope!
}

type Segment {
  scope: Scope!
  name : ID! // this can be generated from displayname, but never changed
  displayName : String
  // todo should we do this like this or should we create another condition type to do this ?
  profileFilter: Filter
  eventFilter : Filter
  sessionFilter : Filter
}

type List {
  scope: Scope!
}

type Topic {
  scope : Scope!
  id: ID! // cannot change
  displayName : String
}

// EVENT-RELATED TYPES
// ----------------------------------------------------------------------------

type Event {
  id: ID!
  type: [EventType]!
  subject: ClientProfile!
  session: Session // optional in specification
  object: String!
  location: [GeoPoint]
  timestamp: DateTime
  properties: [KeyValue]
}

type NewEvent {
  type: [EventType]!
  subject: ClientProfile!
  object: String!
  location: [GeoPoint]
  timestamp: DateTime
  properties: [KeyValue]
}

// event types are defined using schema types, see event-analysis.md for examples

type EventType {
  id: ID! // human-readable, unique, ex: org.oasis-open.cxs.webClient.PageView,org.acmeCrm.cxs.crmClient.ColdCall
  description: String
  schema : SchemaCompoundType
}

// Mutation samples (pre-defined mutations) :
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

mutation minimalCreateEvent($applicationKey: ApplicationKey!, $newEvent: NewEvent ) {
  createEvent(applicationKey: $applicationKey, newEvent: $newEvent) {
  }
}

mutation detailedCreateEvent($applicationKey: ApplicationKey!, $newEvent: NewEvent ) {
  createEvent(applicationKey: $applicationKey, newEvent: $newEvent) {
    id
    type
    client
    subject
    object
    properties
  }
}

mutation collectEvent($applicationKey: ApplicationKey!, $newEvents : [NewEvent]) {
  collectEvent(applicationKey: $applicationKey, newEvents: $newEvents) {
  }
}

// PROFILE TYPES
// ----------------------------------------------------------------------------

// Browser --(structured event)--> Client -> ClientProfile -> MasterProfile

type ClientProfile {
  id: ID!
  properties : [KeyValue] // properties must match schema 
  client : Client
  masterProfile : MasterProfile
  schema: SchemaCompoundType // defined in the CXS server configuration 
}

type MasterPropertyValue {
  key: String!
  value: String
  clients : [Client]
}

type Interest {
  topic: Topic!
  score : Float // 0.0 to 1.0
}

type MasterProfile {
  id: ID!
  properties : [MasterPropertyValue] // properties must match schema 
  clientProfiles : [ClientProfile]
  interests: [Interest]
  segments : [Segment]
  sessions(filter : Filter, first : Integer, last: Integer, after : String, before: String) : [SessionConnection]
  events(filter : Filter, first : Integer, last: Integer, after : String, before: String) : [EventConnection] // TODO: decide whether to use Relay-style pagination or another one
  privacy : Privacy
  schema: SchemaCompoundType  // defined in the CXS server configuration 
}

type Privacy {
  doNotTrack: Boolean
  anonymousBrowsing : Boolean
  propertiesPolicy : [PropertyPolicy]
}

type PropertyPolicy {
  propertyKey : String!
  policyName : String!
}

// TODO do we need both this and policy ?
type PropertyPermission {
  permission : String!
  applicationKey : ApplicationKey
}

// CLIENT TYPES
// ----------------------------------------------------------------------------
type ApplicationKey {
  client: Client!
  label : String!
  key: ID!
  permissions: [String] // "createEvent", "createEventTypes", "fullAccess"
}

type Client {
  applicationKeys: [ApplicationKey]
  description: String!
  name: String!
  thirdPartySystem : Boolean
}

// CONTEXT TYPES
// ----------------------------------------------------------------------------

type ContextQuery {
  filter : [Filter]
}

type Context {
  profile : ClientProfile
  session : Session
  events(filter : Filter) : [Event] // e.g. last 5 events the user has sent
  segments : [Segment]
  dynamicSegments : [DynamicSegmentMatch]
  interests : [Interest]
}

// Dynamic segments are used to evaluate segment definitions stored in other systems (such as a WCM for personalization)
type DynamicSegment {
  name : String!
  filter: Filter
}

type DynamicSegmentMatch {
  name : String
  matched : Boolean
  executionTimeMillis : Long
}

// Mutation samples (pre-defined mutations) :
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

mutation getContext($events: [Event], $dynamicSegments : [DynamicSegment], $clientProfileId : String!) {
  getContext(events: $events, dynamicSegments: $dynamicSegments, clientProfileId: $clientProfileId) {
    profile
    session
  }
}

// QUERY AND FILTER TYPES
// ----------------------------------------------------------------------------
enum SortOrder {
  ASC,
  DESC,
  UNSPECIFIED
}

// (timestamp > January 1st, 2016 AND timestamp < January 1st, 2017 AND type = 'PageView') OR location is in Geneva Area
// OR(
//   AND(
//     GT(timeStamp, January 1st 2016),
//     LT(timeStamp, January 1st 2017),
//     EQUALS(type, 'PageView')
//   ),
//   GEODISTANCE(location,'Geneva', '30km')
// )

// query filteredEvents(filter : Filter) {
//   events(filter : $filter) {
//     edges {
//       type
//     }
//   }
// }
// variables:
// {
//   "filterFunction": {
//     "function" : "OR",
//     "arguments" : [
//       {
//         "function" : "AND",
//         "arguments" : [
//           { "function" : "GT", "arguments" : [ "timeStamp", "January 1st, 2016" ] },
//           { "function" : "LT", "arguments" : [ "timeStamp", "January 1st, 2017" ] },
//           { "function" : "EQUALS", "arguments" : [ "type", "PageView" ] },
//         ]
//       },
//       {
//         "function" : "GEODISTANCE",
//         "arguments" : [ "location", "Geneva", "30km" ]
//       }
//     ]
//   },
//   "orderBy" : [
//     { fieldName : "type", order : "ASC" },
//     { fieldName : "properties.pageID", order : "DESC" }
//   ]
// }

union FilterArgument = Boolean | Int | Float | String | FilterFunction

type FilterFunction {
  function : String!
  arguments : [FilterArgument]
}

type OrderBy {
  fieldName : String // eg : endTime, properties.location
  order : SortOrder
}

type Filter {
  filterFunction : FilterFunction
}

// PAGINATION-RELATED TYPES
// ----------------------------------------------------------------------------

type PageInfo {
  hasPreviousPage : Boolean!
  hasNextPage : Boolean!
}

type EventEdge {
  node : Event
  cursor : String!
}

type EventConnection {
  edges : [EventEdge]
  pageInfo : PageInfo
}

type SessionEdge {
  node : Session
  cursor : String!
}

type SessionConnection {
  edges : [SessionEdge]
  pageInfo : PageInfo
}

type ClientProfileEdge {
  node : ClientProfile
  cursor : String!
}

type ClientProfileConnection {
  edges : [ClientProfileEdge]
  pageInfo : PageInfo
}

type MasterProfileEdge {
  node : MasterProfile
  cursor : String!
}

type MasterProfileConnection {
  edges : [MasterProfileEdge]
  pageInfo : PageInfo
}

// session spanning across clients and client profiles, representing "work sessions" not web client sessions. In effect this means
// that we have a session attached to a master profile, that will timeout after a certain period of user inactivity. Sessions are an
// optional part of the specification.
type Session {
  id : ID!
  masterProfile : MasterProfile
  clientProfiles : [ClientProfile]
  events(filters : Filter) : [EventConnection]
  properties : [KeyValue]
  startTime : Long
  endTime : Long
}

// GRAPHQL QUERY TYPES
// ----------------------------------------------------------------------------

type Query {
  event(id : String) : Event
  events(filter : Filter, orderBy : [OrderBy]) : [EventConnection]
  context(dynamicSegments : [DynamicSegment], clientProfileId: String) : Context
  count(filter : Filter) : Long // used to count profiles matching a condition
  profilesByTopic(topicId : String) : [MasterProfile]
}

// Samples : sample usage of these query types
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

query profilesByTopic($topicId : ID!) {
  profilesByTopic(topicId: $topicId) {
    id
    segments
    properties
  }
}

query eventById($id: ID!) {
  event(id: $id) {
    type
  }
}

query completeContext($dynamicSegments : [DynamicSegment], $clientProfileId : String) {
  context(dynamicSegments : $dynamicSegments, clientProfileId : $clientProfileId) {
    profile {
      properties(filter: []) {
      }
    }
    session {
      properties(filter: []) {
      }
    }
    segments {
      name
    }
    dynamicSegments {
      name
      matched
      executionTimeMillis
    }
    interests {
      interest {
        id
        displayName
      }
      score
    }
  }
}

query smallContext($dynamicSegments : [DynamicSegment], $clientProfileId : String) {
  context(dynamicSegments : $dynamicSegments, clientProfileId : $clientProfileId) {
    profile {
      properties(filter : ["email"]) {
        value 
      }      
    }
  }
}

query allSegmentsContext($clientProfileId : String) {
  context(clientProfileId : $clientProfileId) {
    segments {
      name
    }
  }
}

query contextAllSegmentsIncludingDynamic($dynamicSegments : [DynamicSegment], $clientProfileId : String) {
  context(clientProfileId : $clientProfileId, dynamicSegments : $dynamicSegments) {
    segments {
      name
    }
    dynamicSegments {
      name
      matched
    }
  }
}

// retrieve profile email and last products viewed
query emailAndProductsViewsContext($clientProfileId : String, $eventFilter : Filter) {
  context(clientProfileId : $clientProfileId) {
    events(filter : $eventFilter) {
      timeStamp
      object
      properties(filter: ["productName", "productSKU", "productDescription"]) {
        key
        value
      }
    }
    profile {
      properties(filter : "email") {
        value
      }
    }
  }
}

// GRAPHQL MUTATION TYPES
// ----------------------------------------------------------------------------

type Mutation {
  createEvent(applicationKey: ApplicationKey!, newEvent: NewEvent!) : Event
  collectEvent(applicationKey: ApplicationKey!, newEvents: [NewEvent]!) : Int
  getContext(events: [Event], dynamicSegments : [DynamicSegment], clientProfileId: String!) : Context
}
